// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WakuWakuAPI.Infraestructure.Data;

#nullable disable

namespace WakuWakuAPI.Infraestructure.Data.Migrations
{
    [DbContext(typeof(WakuWakuContext))]
    [Migration("20240209145026_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9604),
                            Description = "Some description",
                            Name = "Frontend"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9605),
                            Description = "Some description",
                            Name = "Backend"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9606),
                            Description = "Some description",
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9607),
                            Description = "Some description",
                            Name = "DevOps"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9607),
                            Description = "Some description",
                            Name = "Data Science"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9608),
                            Description = "Some description",
                            Name = "Design"
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Dificulty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Dificulty");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9456),
                            Description = "Easy"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9461),
                            Description = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9462),
                            Description = "Hard"
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DificultyId")
                        .HasColumnType("integer");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DificultyId");

                    b.HasIndex("SkillId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Goals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9764),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9765),
                            Description = "Learn HTML",
                            DificultyId = 1,
                            SkillId = 1,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9773),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9774),
                            Description = "Learn CSS",
                            DificultyId = 1,
                            SkillId = 2,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9775),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9775),
                            Description = "Learn JavaScript",
                            DificultyId = 1,
                            SkillId = 3,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9776),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9777),
                            Description = "Learn React",
                            DificultyId = 1,
                            SkillId = 4,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9778),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9778),
                            Description = "Learn Angular",
                            DificultyId = 1,
                            SkillId = 5,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9779),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9779),
                            Description = "Learn Vue",
                            DificultyId = 1,
                            SkillId = 6,
                            StatusId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9780),
                            Deadline = new DateTime(2024, 3, 10, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9781),
                            Description = "Learn Node",
                            DificultyId = 1,
                            SkillId = 7,
                            StatusId = 1,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9668),
                            Description = "Programing language",
                            Name = "HTML"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9671),
                            Description = "Programing language",
                            Name = "CSS"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9672),
                            Description = "Programing language",
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9673),
                            Description = "Library",
                            Name = "React"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9673),
                            Description = "Framework",
                            Name = "Angular"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9674),
                            Description = "Framework",
                            Name = "Vue"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9675),
                            Description = "Runtime environment",
                            Name = "Node"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9676),
                            Description = "Programing language",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9676),
                            Description = "Programing language",
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9677),
                            Description = "Programing language",
                            Name = "Java"
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9678),
                            Description = "Programing language",
                            Name = "C#"
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9678),
                            Description = "Programing language",
                            Name = "PHP"
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9679),
                            Description = "Programing language",
                            Name = "Swift"
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9680),
                            Description = "Programing language",
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9681),
                            Description = "Programing language",
                            Name = "Objective-C"
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9681),
                            Description = "Framework",
                            Name = "Xamarin"
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9682),
                            Description = "Framework",
                            Name = "Flutter"
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9683),
                            Description = "Framework",
                            Name = "Ionic"
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9684),
                            Description = "Containerization platform",
                            Name = "Docker"
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9684),
                            Description = "Container orchestration platform",
                            Name = "Kubernetes"
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9685),
                            Description = "Automation server",
                            Name = "Jenkins"
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9686),
                            Description = "DevOps platform",
                            Name = "GitLab"
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9687),
                            Description = "DevOps platform",
                            Name = "GitHub"
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9688),
                            Description = "DevOps platform",
                            Name = "Bitbucket"
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9690),
                            Description = "Programing language",
                            Name = "Python"
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9691),
                            Description = "Programing language",
                            Name = "R"
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9692),
                            Description = "Programing language",
                            Name = "Scala"
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9693),
                            Description = "Programing language",
                            Name = "Julia"
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9693),
                            Description = "Programing language",
                            Name = "Matlab"
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 6,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9694),
                            Description = "Design software",
                            Name = "Photoshop"
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9582),
                            Description = "To Do"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9583),
                            Description = "In Progress"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9585),
                            Description = "Done"
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserDataId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDataId")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9744),
                            FirstName = "John",
                            LastName = "Doe",
                            UserDataId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9746),
                            FirstName = "Jane",
                            LastName = "Doe",
                            UserDataId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9747),
                            FirstName = "John",
                            LastName = "Smith",
                            UserDataId = 3
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("UsersData");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9726),
                            Email = "email1@email.com",
                            Password = "password1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9728),
                            Email = "email2@email.com",
                            Password = "password2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 2, 9, 14, 50, 26, 548, DateTimeKind.Utc).AddTicks(9729),
                            Email = "email3@email.com",
                            Password = "password3"
                        });
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Goal", b =>
                {
                    b.HasOne("WakuWakuAPI.Domain.Models.Dificulty", "Dificulty")
                        .WithMany("Goals")
                        .HasForeignKey("DificultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WakuWakuAPI.Domain.Models.Skill", "Skill")
                        .WithMany("Goals")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WakuWakuAPI.Domain.Models.Status", "Status")
                        .WithMany("Goals")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WakuWakuAPI.Domain.Models.User", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dificulty");

                    b.Navigation("Skill");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Skill", b =>
                {
                    b.HasOne("WakuWakuAPI.Domain.Models.Category", "Category")
                        .WithMany("Skills")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.User", b =>
                {
                    b.HasOne("WakuWakuAPI.Domain.Models.UserData", "UserData")
                        .WithOne()
                        .HasForeignKey("WakuWakuAPI.Domain.Models.User", "UserDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserData");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Category", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Dificulty", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Skill", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.Status", b =>
                {
                    b.Navigation("Goals");
                });

            modelBuilder.Entity("WakuWakuAPI.Domain.Models.User", b =>
                {
                    b.Navigation("Goals");
                });
#pragma warning restore 612, 618
        }
    }
}
